{"version":3,"file":"module-loader.js","sourceRoot":"","sources":["../src/lib/module-loader.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport * as path from 'path';\nimport {promises as fs} from 'fs';\nimport {URL, fileURLToPath, pathToFileURL} from 'url';\nimport * as vm from 'vm';\nimport resolveAsync from 'resolve';\nimport {builtinModules} from 'module';\n\ntype PackageJSON = {main?: string; module?: string; 'jsnext:main'?: string};\n\nconst builtIns = new Set(builtinModules);\n\nconst specifierMatches = (specifier: string, match: string) =>\n  specifier === match || specifier.startsWith(match + '/');\n\n// IMPORTANT: We should always use our own VmModule interface for public APIs\n// instead of vm.Module, because vm.Module typings are not provided by\n// @types/node, and we do not augment them in a way that affects consumers (the\n// types in custom_typings are only available during our own build).\n\n/**\n * A subset of the Node vm.Module API.\n */\nexport interface VmModule {\n  /**\n   * The namespace object of the module that provides access to its exports.\n   * See https://nodejs.org/api/vm.html#modulenamespace\n   */\n  namespace: {[name: string]: unknown};\n}\n\nexport interface ModuleRecord {\n  path: string;\n  module?: VmModule;\n  imports: Array<string>;\n  evaluated: Promise<VmModule>;\n}\n\ninterface ImportResult {\n  path: string;\n  module: VmModule;\n}\n\nexport interface Options {\n  global?: object;\n  filesystem?: FileSystem;\n}\n\n/**\n * A JavaScript module loader that utilizes the Node `vm` module\n * (https://nodejs.org/api/vm.html).\n *\n * Most of the hooks implement fairly standard web-compatible module loading:\n *  - An import specifier resolver that uses Node module resoution\n *  - A linker that loads dependencies from the local filesystem\n *  - A module cache keyed by resolved URL\n *  - import.meta.url support\n *  - Dynamic import() that functions the same as static imports\n *\n * There are some behaviors specific to lit-html. Mainly that imports of certain\n * directives are redirected to Node/SSR compatible implementations.\n */\nexport class ModuleLoader {\n  private static _nextVmContextId = 0;\n\n  // This ID is appended to all module identifiers to work around an apparent\n  // v8 bug where duplicate identifiers would cause a crash.\n  private readonly _vmContextId = ModuleLoader._nextVmContextId++;\n\n  private readonly _context: vm.Context;\n\n  /**\n   * TODO (justinfagnani): This is a temporary stand-in for a real graph API.\n   * We want to be able to invalidate a module and the transitive closure\n   * of its importers so that we can update the graph.\n   *\n   * The keys of the map are useful for enumering static imported modules\n   * after an entrypoint is loaded.\n   */\n  readonly cache = new Map<string, ModuleRecord>();\n\n  // TODO (justinfagnani): Allow passing a filesystem object to allow network\n  // sources, in-memory for tests, etc.\n  constructor(options?: Options) {\n    this._context = vm.createContext(options?.global);\n  }\n\n  /**\n   * Imports a module given by `path` into a new VM context with `contextGlobal` as the\n   * global object.\n   */\n  async importModule(\n    specifier: string,\n    referrerPathOrFileUrl: string\n  ): Promise<ImportResult> {\n    const referrerPath = referrerPathOrFileUrl.startsWith('file://')\n      ? fileURLToPath(referrerPathOrFileUrl)\n      : referrerPathOrFileUrl;\n    const result = await this._loadModule(specifier, referrerPath);\n    const module = result.module as vm.Module;\n    if (module.status === 'unlinked') {\n      await module.link(this._linker);\n    }\n    if (module.status !== 'evaluated') {\n      await module.evaluate();\n    }\n    return result;\n  }\n\n  /**\n   * Performs the actual loading of module source from disk, creates the\n   * Module instance, and maintains the module cache.\n   *\n   * Used directly by `importModule` and by the linker and dynamic import()\n   * support function.\n   */\n  private async _loadModule(\n    specifier: string,\n    referrerPath: string\n  ): Promise<ImportResult> {\n    if (builtIns.has(specifier)) {\n      return this._loadBuiltInModule(specifier);\n    }\n\n    const moduleURL = await resolveSpecifier(specifier, referrerPath);\n    if (moduleURL.protocol !== 'file:') {\n      throw new Error(`Unsupported protocol: ${moduleURL.protocol}`);\n    }\n    const modulePath = moduleURL.pathname;\n\n    // Look in the cache\n    let moduleRecord = this.cache.get(modulePath);\n    if (moduleRecord !== undefined) {\n      return {\n        path: modulePath,\n        module: await moduleRecord.evaluated,\n      };\n    }\n\n    const modulePromise = (async () => {\n      const source = await fs.readFile(modulePath, 'utf-8');\n      // TODO: store and re-use cachedData:\n      // https://nodejs.org/api/vm.html#sourcetextmodulecreatecacheddata\n      return new vm.SourceTextModule(source, {\n        initializeImportMeta,\n        importModuleDynamically: this._importModuleDynamically,\n        context: this._context,\n        identifier: this._getIdentifier(modulePath),\n      });\n    })();\n\n    moduleRecord = {\n      path: modulePath,\n      imports: [],\n      evaluated: modulePromise,\n    };\n    this.cache.set(modulePath, moduleRecord);\n    const module = await modulePromise;\n    return {\n      path: modulePath,\n      module,\n    };\n  }\n\n  private async _loadBuiltInModule(specifier: string): Promise<ImportResult> {\n    let moduleRecord = this.cache.get(specifier);\n    if (moduleRecord !== undefined) {\n      return {\n        path: specifier,\n        module: await moduleRecord.evaluated,\n      };\n    }\n    // Provide basic support for built-in modules (needed for node shims of\n    // DOM APIs like fetch)\n    const modulePromise = (async () => {\n      const mod = await import(specifier);\n      return new vm.SyntheticModule(\n        Object.keys(mod),\n        function () {\n          Object.keys(mod).forEach((key) => this.setExport(key, mod[key]));\n        },\n        {\n          context: this._context,\n          identifier: this._getBuiltInIdentifier(specifier),\n        }\n      );\n    })();\n    moduleRecord = {\n      path: specifier,\n      // TODO (justinfagnani): these imports should be populated in the linker\n      // to record the edges of the module graph\n      imports: [],\n      evaluated: modulePromise,\n    };\n    this.cache.set(specifier, moduleRecord);\n    const module = await modulePromise;\n    return {\n      path: specifier,\n      module,\n    };\n  }\n\n  private _importModuleDynamically = async (\n    specifier: string,\n    referencingModule: vm.Module\n  ): Promise<vm.Module> => {\n    const result = await this.importModule(\n      specifier,\n      referencingModule.identifier\n    );\n    return result.module as vm.Module;\n  };\n\n  private _linker = async (\n    specifier: string,\n    referencingModule: vm.Module\n  ): Promise<vm.Module> => {\n    const {identifier} = referencingModule;\n    if (!/:\\d+$/.test(identifier)) {\n      throw new Error('Unexpected file:// URL identifier without context ID');\n    }\n    const referrerPath = identifier.split(/:\\d+$/)[0];\n    const result = await this._loadModule(specifier, referrerPath);\n    const referrerModule = this.cache.get(referrerPath);\n    if (referrerModule !== undefined) {\n      referrerModule.imports.push(result.path);\n    }\n    return result.module as vm.Module;\n  };\n\n  private _getIdentifier(modulePath: string) {\n    return `${modulePath}:${this._vmContextId}`;\n  }\n\n  private _getBuiltInIdentifier(specifier: string) {\n    return `${specifier}:${this._vmContextId}`;\n  }\n}\n\n/**\n * Resolves specifiers using web-ish Node module resolution. Web-compatible full\n * URLs are passed through unmodified. Relative and absolute URLs (starting in\n * `/`, `./`, `../`) are resolved relative to `referrerPath`. \"Bare\" module\n * specifiers are resolved with the 'resolve' package.\n *\n * This replaces some Lit modules with SSR compatible equivalents. This is\n * currently hard-coded, but should instead be done with a configuration object.\n */\nexport const resolveSpecifier = async (\n  specifier: string,\n  referrerPath: string\n): Promise<URL> => {\n  try {\n    // First see if the specifier is a full URL, and if so, use that.\n\n    // TODO: This will mainly be http:// and https:// URLs, which we may _not_\n    // want to support. We probably also want to filter out file:// URLs as\n    // those will be absolute to the file system.\n    return new URL(specifier);\n  } catch (e) {\n    if (referrerPath === undefined) {\n      throw new Error('referrerPath is undefined');\n    }\n    if (\n      specifierMatches(specifier, 'lit') ||\n      specifierMatches(specifier, 'lit-html') ||\n      specifierMatches(specifier, 'lit-element') ||\n      specifierMatches(specifier, '@lit/reactive-element')\n    ) {\n      // Override where we resolve lit packages from so that we always resolve to\n      // a single version.\n      referrerPath = fileURLToPath(import.meta.url);\n    }\n    const modulePath = await resolve(specifier, {\n      basedir: path.dirname(referrerPath),\n      moduleDirectory: ['node_modules'],\n      extensions: ['.js'],\n      // Some packages use a non-standard alternative to the \"main\" field\n      // in their package.json to differentiate their ES module version.\n      packageFilter: (packageJson: PackageJSON) => {\n        packageJson.main =\n          packageJson.module ?? packageJson['jsnext:main'] ?? packageJson.main;\n        return packageJson;\n      },\n    });\n    return pathToFileURL(modulePath);\n  }\n};\n\n/**\n * Web-like import.meta initializer that sets up import.meta.url\n */\nconst initializeImportMeta = (meta: {url: string}, module: vm.Module) => {\n  meta.url = module.identifier;\n};\n\nconst resolve = async (\n  id: string,\n  opts: resolveAsync.AsyncOpts\n): Promise<string> => {\n  return new Promise((res, rej) => {\n    resolveAsync(id, opts, (err, resolved) => {\n      if (err != null) {\n        rej(err);\n      } else {\n        res(resolved!);\n      }\n    });\n  });\n};\n"]}